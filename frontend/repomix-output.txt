This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-27T19:19:48.791Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  lib/
    elementData.ts
    index.ts
    MaterialCard.svelte
    MaterialForm.svelte
    StructureViewer.svelte
  routes/
    +layout.svelte
    +page.svelte
  api.ts
  app.css
  app.d.ts
  app.html
  App.svelte
  types.ts
.gitignore
.npmrc
.prettierignore
.prettierrc
eslint.config.js
svelte.config.js
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: src/lib/elementData.ts
================
import type { ElementData, ElementProperties } from '../types';

// Element data for the most common elements in materials
export const elementData: ElementData = {
  "H": {
    name: "Hydrogen",
    symbol: "H",
    atomicNumber: 1,
    atomicMass: 1.008,
    category: "Nonmetal",
    color: "#FFFFFF",
    electronConfiguration: "1s¹",
    electronegativity: 2.20,
    ionizationEnergy: 13.598
  },
  "Li": {
    name: "Lithium",
    symbol: "Li",
    atomicNumber: 3,
    atomicMass: 6.94,
    category: "Alkali Metal",
    color: "#CC80FF",
    electronConfiguration: "[He] 2s¹",
    electronegativity: 0.98,
    ionizationEnergy: 5.392
  },
  "Be": {
    name: "Beryllium",
    symbol: "Be",
    atomicNumber: 4,
    atomicMass: 9.0122,
    category: "Alkaline Earth Metal",
    color: "#C2FF00",
    electronConfiguration: "[He] 2s²",
    electronegativity: 1.57,
    ionizationEnergy: 9.323
  },
  "B": {
    name: "Boron",
    symbol: "B",
    atomicNumber: 5,
    atomicMass: 10.81,
    category: "Metalloid",
    color: "#FFB5B5",
    electronConfiguration: "[He] 2s² 2p¹",
    electronegativity: 2.04,
    ionizationEnergy: 8.298
  },
  "C": {
    name: "Carbon",
    symbol: "C",
    atomicNumber: 6,
    atomicMass: 12.011,
    category: "Nonmetal",
    color: "#909090",
    electronConfiguration: "[He] 2s² 2p²",
    electronegativity: 2.55,
    ionizationEnergy: 11.260
  },
  "N": {
    name: "Nitrogen",
    symbol: "N",
    atomicNumber: 7,
    atomicMass: 14.007,
    category: "Nonmetal",
    color: "#3050F8",
    electronConfiguration: "[He] 2s² 2p³",
    electronegativity: 3.04,
    ionizationEnergy: 14.534
  },
  "O": {
    name: "Oxygen",
    symbol: "O",
    atomicNumber: 8,
    atomicMass: 15.999,
    category: "Nonmetal",
    color: "#FF0D0D",
    electronConfiguration: "[He] 2s² 2p⁴",
    electronegativity: 3.44,
    ionizationEnergy: 13.618
  },
  "F": {
    name: "Fluorine",
    symbol: "F",
    atomicNumber: 9,
    atomicMass: 18.998,
    category: "Halogen",
    color: "#90E050",
    electronConfiguration: "[He] 2s² 2p⁵",
    electronegativity: 3.98,
    ionizationEnergy: 17.423
  },
  "Na": {
    name: "Sodium",
    symbol: "Na",
    atomicNumber: 11,
    atomicMass: 22.99,
    category: "Alkali Metal",
    color: "#AB5CF2",
    electronConfiguration: "[Ne] 3s¹",
    electronegativity: 0.93,
    ionizationEnergy: 5.139
  },
  "Mg": {
    name: "Magnesium",
    symbol: "Mg",
    atomicNumber: 12,
    atomicMass: 24.305,
    category: "Alkaline Earth Metal",
    color: "#8AFF00",
    electronConfiguration: "[Ne] 3s²",
    electronegativity: 1.31,
    ionizationEnergy: 7.646
  },
  "Al": {
    name: "Aluminum",
    symbol: "Al",
    atomicNumber: 13,
    atomicMass: 26.982,
    category: "Post-Transition Metal",
    color: "#BFA6A6",
    electronConfiguration: "[Ne] 3s² 3p¹",
    electronegativity: 1.61,
    ionizationEnergy: 5.986
  },
  "Si": {
    name: "Silicon",
    symbol: "Si",
    atomicNumber: 14,
    atomicMass: 28.085,
    category: "Metalloid",
    color: "#F0C8A0",
    electronConfiguration: "[Ne] 3s² 3p²",
    electronegativity: 1.90,
    ionizationEnergy: 8.152
  },
  "P": {
    name: "Phosphorus",
    symbol: "P",
    atomicNumber: 15,
    atomicMass: 30.974,
    category: "Nonmetal",
    color: "#FF8000",
    electronConfiguration: "[Ne] 3s² 3p³",
    electronegativity: 2.19,
    ionizationEnergy: 10.487
  },
  "S": {
    name: "Sulfur",
    symbol: "S",
    atomicNumber: 16,
    atomicMass: 32.06,
    category: "Nonmetal",
    color: "#FFFF30",
    electronConfiguration: "[Ne] 3s² 3p⁴",
    electronegativity: 2.58,
    ionizationEnergy: 10.360
  },
  "Cl": {
    name: "Chlorine",
    symbol: "Cl",
    atomicNumber: 17,
    atomicMass: 35.45,
    category: "Halogen",
    color: "#1FF01F",
    electronConfiguration: "[Ne] 3s² 3p⁵",
    electronegativity: 3.16,
    ionizationEnergy: 12.968
  },
  "K": {
    name: "Potassium",
    symbol: "K",
    atomicNumber: 19,
    atomicMass: 39.098,
    category: "Alkali Metal",
    color: "#8F40D4",
    electronConfiguration: "[Ar] 4s¹",
    electronegativity: 0.82,
    ionizationEnergy: 4.341
  },
  "Ca": {
    name: "Calcium",
    symbol: "Ca",
    atomicNumber: 20,
    atomicMass: 40.078,
    category: "Alkaline Earth Metal",
    color: "#3DFF00",
    electronConfiguration: "[Ar] 4s²",
    electronegativity: 1.00,
    ionizationEnergy: 6.113
  },
  "Ti": {
    name: "Titanium",
    symbol: "Ti",
    atomicNumber: 22,
    atomicMass: 47.867,
    category: "Transition Metal",
    color: "#BFC2C7",
    electronConfiguration: "[Ar] 3d² 4s²",
    electronegativity: 1.54,
    ionizationEnergy: 6.828
  },
  "Cr": {
    name: "Chromium",
    symbol: "Cr",
    atomicNumber: 24,
    atomicMass: 51.996,
    category: "Transition Metal",
    color: "#8A99C7",
    electronConfiguration: "[Ar] 3d⁵ 4s¹",
    electronegativity: 1.66,
    ionizationEnergy: 6.767
  },
  "Mn": {
    name: "Manganese",
    symbol: "Mn",
    atomicNumber: 25,
    atomicMass: 54.938,
    category: "Transition Metal",
    color: "#9C7AC7",
    electronConfiguration: "[Ar] 3d⁵ 4s²",
    electronegativity: 1.55,
    ionizationEnergy: 7.434
  },
  "Fe": {
    name: "Iron",
    symbol: "Fe",
    atomicNumber: 26,
    atomicMass: 55.845,
    category: "Transition Metal",
    color: "#E06633",
    electronConfiguration: "[Ar] 3d⁶ 4s²",
    electronegativity: 1.83,
    ionizationEnergy: 7.902
  },
  "Co": {
    name: "Cobalt",
    symbol: "Co",
    atomicNumber: 27,
    atomicMass: 58.933,
    category: "Transition Metal",
    color: "#F090A0",
    electronConfiguration: "[Ar] 3d⁷ 4s²",
    electronegativity: 1.88,
    ionizationEnergy: 7.881
  },
  "Ni": {
    name: "Nickel",
    symbol: "Ni",
    atomicNumber: 28,
    atomicMass: 58.693,
    category: "Transition Metal",
    color: "#50D050",
    electronConfiguration: "[Ar] 3d⁸ 4s²",
    electronegativity: 1.91,
    ionizationEnergy: 7.640
  },
  "Cu": {
    name: "Copper",
    symbol: "Cu",
    atomicNumber: 29,
    atomicMass: 63.546,
    category: "Transition Metal",
    color: "#C88033",
    electronConfiguration: "[Ar] 3d¹⁰ 4s¹",
    electronegativity: 1.90,
    ionizationEnergy: 7.726
  },
  "Zn": {
    name: "Zinc",
    symbol: "Zn",
    atomicNumber: 30,
    atomicMass: 65.38,
    category: "Transition Metal",
    color: "#7D80B0",
    electronConfiguration: "[Ar] 3d¹⁰ 4s²",
    electronegativity: 1.65,
    ionizationEnergy: 9.394
  },
  "Ga": {
    name: "Gallium",
    symbol: "Ga",
    atomicNumber: 31,
    atomicMass: 69.723,
    category: "Post-Transition Metal",
    color: "#C28F8F",
    electronConfiguration: "[Ar] 3d¹⁰ 4s² 4p¹",
    electronegativity: 1.81,
    ionizationEnergy: 5.999
  },
  "Ge": {
    name: "Germanium",
    symbol: "Ge",
    atomicNumber: 32,
    atomicMass: 72.630,
    category: "Metalloid",
    color: "#668F8F",
    electronConfiguration: "[Ar] 3d¹⁰ 4s² 4p²",
    electronegativity: 2.01,
    ionizationEnergy: 7.900
  },
  "As": {
    name: "Arsenic",
    symbol: "As",
    atomicNumber: 33,
    atomicMass: 74.922,
    category: "Metalloid",
    color: "#BD80E3",
    electronConfiguration: "[Ar] 3d¹⁰ 4s² 4p³",
    electronegativity: 2.18,
    ionizationEnergy: 9.815
  },
  "Se": {
    name: "Selenium",
    symbol: "Se",
    atomicNumber: 34,
    atomicMass: 78.971,
    category: "Nonmetal",
    color: "#FFA100",
    electronConfiguration: "[Ar] 3d¹⁰ 4s² 4p⁴",
    electronegativity: 2.55,
    ionizationEnergy: 9.752
  },
  "Rb": {
    name: "Rubidium",
    symbol: "Rb",
    atomicNumber: 37,
    atomicMass: 85.468,
    category: "Alkali Metal",
    color: "#702EB0",
    electronConfiguration: "[Kr] 5s¹",
    electronegativity: 0.82,
    ionizationEnergy: 4.177
  },
  "Sr": {
    name: "Strontium",
    symbol: "Sr",
    atomicNumber: 38,
    atomicMass: 87.62,
    category: "Alkaline Earth Metal",
    color: "#00FF00",
    electronConfiguration: "[Kr] 5s²",
    electronegativity: 0.95,
    ionizationEnergy: 5.695
  },
  "Zr": {
    name: "Zirconium",
    symbol: "Zr",
    atomicNumber: 40,
    atomicMass: 91.224,
    category: "Transition Metal",
    color: "#94E0E0",
    electronConfiguration: "[Kr] 4d² 5s²",
    electronegativity: 1.33,
    ionizationEnergy: 6.634
  },
  "Nb": {
    name: "Niobium",
    symbol: "Nb",
    atomicNumber: 41,
    atomicMass: 92.906,
    category: "Transition Metal",
    color: "#73C2C9",
    electronConfiguration: "[Kr] 4d⁴ 5s¹",
    electronegativity: 1.6,
    ionizationEnergy: 6.759
  },
  "Mo": {
    name: "Molybdenum",
    symbol: "Mo",
    atomicNumber: 42,
    atomicMass: 95.95,
    category: "Transition Metal",
    color: "#54B5B5",
    electronConfiguration: "[Kr] 4d⁵ 5s¹",
    electronegativity: 2.16,
    ionizationEnergy: 7.092
  },
  "Tc": {
    name: "Technetium",
    symbol: "Tc",
    atomicNumber: 43,
    atomicMass: 98,
    category: "Transition Metal",
    color: "#3B9E9E",
    electronConfiguration: "[Kr] 4d⁵ 5s²",
    electronegativity: 1.9,
    ionizationEnergy: 7.28
  },
  "Ru": {
    name: "Ruthenium",
    symbol: "Ru",
    atomicNumber: 44,
    atomicMass: 101.07,
    category: "Transition Metal",
    color: "#248F8F",
    electronConfiguration: "[Kr] 4d⁷ 5s¹",
    electronegativity: 2.2,
    ionizationEnergy: 7.36
  },
  "Rh": {
    name: "Rhodium",
    symbol: "Rh",
    atomicNumber: 45,
    atomicMass: 102.91,
    category: "Transition Metal",
    color: "#0A7D8C",
    electronConfiguration: "[Kr] 4d⁸ 5s¹",
    electronegativity: 2.28,
    ionizationEnergy: 7.459
  },
  "Pd": {
    name: "Palladium",
    symbol: "Pd",
    atomicNumber: 46,
    atomicMass: 106.42,
    category: "Transition Metal",
    color: "#006985",
    electronConfiguration: "[Kr] 4d¹⁰",
    electronegativity: 2.2,
    ionizationEnergy: 8.337
  },
  "Ag": {
    name: "Silver",
    symbol: "Ag",
    atomicNumber: 47,
    atomicMass: 107.87,
    category: "Transition Metal",
    color: "#C0C0C0",
    electronConfiguration: "[Kr] 4d¹⁰ 5s¹",
    electronegativity: 1.93,
    ionizationEnergy: 7.576
  },
  "In": {
    name: "Indium",
    symbol: "In",
    atomicNumber: 49,
    atomicMass: 114.82,
    category: "Post-Transition Metal",
    color: "#A67573",
    electronConfiguration: "[Kr] 4d¹⁰ 5s² 5p¹",
    electronegativity: 1.78,
    ionizationEnergy: 5.786
  },
  "Sn": {
    name: "Tin",
    symbol: "Sn",
    atomicNumber: 50,
    atomicMass: 118.71,
    category: "Post-Transition Metal",
    color: "#668080",
    electronConfiguration: "[Kr] 4d¹⁰ 5s² 5p²",
    electronegativity: 1.96,
    ionizationEnergy: 7.344
  },
  "Sb": {
    name: "Antimony",
    symbol: "Sb",
    atomicNumber: 51,
    atomicMass: 121.76,
    category: "Metalloid",
    color: "#9E63B5",
    electronConfiguration: "[Kr] 4d¹⁰ 5s² 5p³",
    electronegativity: 2.05,
    ionizationEnergy: 8.64
  },
  "Te": {
    name: "Tellurium",
    symbol: "Te",
    atomicNumber: 52,
    atomicMass: 127.60,
    category: "Metalloid",
    color: "#D47A00",
    electronConfiguration: "[Kr] 4d¹⁰ 5s² 5p⁴",
    electronegativity: 2.1,
    ionizationEnergy: 9.01
  },
  "Ba": {
    name: "Barium",
    symbol: "Ba",
    atomicNumber: 56,
    atomicMass: 137.33,
    category: "Alkaline Earth Metal",
    color: "#00C900",
    electronConfiguration: "[Xe] 6s²",
    electronegativity: 0.89,
    ionizationEnergy: 5.212
  },
  "La": {
    name: "Lanthanum",
    symbol: "La",
    atomicNumber: 57,
    atomicMass: 138.91,
    category: "Lanthanide",
    color: "#70D4FF",
    electronConfiguration: "[Xe] 5d¹ 6s²",
    electronegativity: 1.1,
    ionizationEnergy: 5.577
  },
  "Ce": {
    name: "Cerium",
    symbol: "Ce",
    atomicNumber: 58,
    atomicMass: 140.12,
    category: "Lanthanide",
    color: "#FFFFC7",
    electronConfiguration: "[Xe] 4f¹ 5d¹ 6s²",
    electronegativity: 1.12,
    ionizationEnergy: 5.539
  },
  "Gd": {
    name: "Gadolinium",
    symbol: "Gd",
    atomicNumber: 64,
    atomicMass: 157.25,
    category: "Lanthanide",
    color: "#45FEDE",
    electronConfiguration: "[Xe] 4f⁷ 5d¹ 6s²",
    electronegativity: 1.2,
    ionizationEnergy: 6.15
  },
  "Hf": {
    name: "Hafnium",
    symbol: "Hf",
    atomicNumber: 72,
    atomicMass: 178.49,
    category: "Transition Metal",
    color: "#4DC2FF",
    electronConfiguration: "[Xe] 4f¹⁴ 5d² 6s²",
    electronegativity: 1.3,
    ionizationEnergy: 6.825
  },
  "Bi": {
    name: "Bismuth",
    symbol: "Bi",
    atomicNumber: 83,
    atomicMass: 208.98,
    category: "Post-Transition Metal",
    color: "#9E4FB5",
    electronConfiguration: "[Xe] 4f¹⁴ 5d¹⁰ 6s² 6p³",
    electronegativity: 2.02,
    ionizationEnergy: 7.289
  },
  "Pb": {
    name: "Lead",
    symbol: "Pb",
    atomicNumber: 82,
    atomicMass: 207.2,
    category: "Post-Transition Metal",
    color: "#575961",
    electronConfiguration: "[Xe] 4f¹⁴ 5d¹⁰ 6s² 6p²",
    electronegativity: 2.33,
    ionizationEnergy: 7.417
  }
};

/**
 * Get element data by symbol
 * 
 * @param symbol - Element symbol (e.g., "Fe")
 * @returns Element data or a default object if not found
 */
export function getElementData(symbol: string): ElementProperties {
  // Basic default element data if not found
  const defaultElement: ElementProperties = {
    name: "Unknown",
    symbol: symbol,
    atomicNumber: 0,
    atomicMass: 0,
    category: "Unknown",
    color: "#CCCCCC",
    electronConfiguration: "Unknown"
  };
  
  return elementData[symbol] || defaultElement;
}

/**
 * Get color for an element
 * 
 * @param symbol - Element symbol (e.g., "Fe")
 * @returns Hex color string
 */
export function getElementColor(symbol: string): string {
  return getElementData(symbol).color;
}

/**
 * Get a readable description of an element
 * 
 * @param symbol - Element symbol (e.g., "Fe")
 * @returns Formatted description
 */
export function getElementDescription(symbol: string): string {
  const element = getElementData(symbol);
  return `${element.name} (${element.symbol}, Z=${element.atomicNumber})
Atomic Mass: ${element.atomicMass} u
Category: ${element.category}
Electron Config: ${element.electronConfiguration}
${element.electronegativity ? `Electronegativity: ${element.electronegativity}` : ''}`;
}

================
File: src/lib/index.ts
================
// place files you want to import through the `$lib` alias in this folder.

================
File: src/lib/MaterialCard.svelte
================
<script lang="ts">
    import type { Material } from '../types';
    
    export let material: Material;
    export let selected: boolean = false;
    
    // Format a numeric value with units
    function formatValue(value: number | undefined | null, unit: string, precision: number = 2): string {
      if (value === undefined || value === null) {
        return 'N/A';
      }
      return `${value.toFixed(precision)} ${unit}`;
    }
  </script>

================
File: src/lib/MaterialForm.svelte
================
<script lang="ts">
    import { createEventDispatcher } from 'svelte';
    import { generateMaterials } from '../api';
    import type { GenerationResponse } from '../types';
    
    const dispatch = createEventDispatcher<{
      success: GenerationResponse;
      error: { error: string };
    }>();
    
    // Form state
    let query: string = '';
    let n_samples: number = 5;
    let temperature: number = 1.2;
    let loading: boolean = false;
    let error: string | null = null;
    
    // Example queries
    const exampleQueries: string[] = [
      "I need a semiconductor with band gap between 1.5 and 2.0 eV",
      "Find materials with low thermal conductivity but high electrical conductivity",
      "I want a lightweight material with good corrosion resistance and high strength-to-weight ratio",
      "Looking for a material for battery electrodes with high stability",
      "Generate a material with high tensile strength and ductility"
    ];
    
    function setExampleQuery(example: string): void {
      query = example;
    }
    
    async function handleSubmit(): Promise<void> {
      if (!query.trim()) {
        error = "Please enter a material description";
        return;
      }
      
      error = null;
      loading = true;
      
      try {
        const result = await generateMaterials({
          query,
          n_samples,
          temperature
        });
        
        dispatch('success', result);
      } catch (err: any) {
        error = err.message || "Failed to generate materials";
        dispatch('error', { error });
      } finally {
        loading = false;
      }
    }
  </script>

================
File: src/lib/StructureViewer.svelte
================
<script lang="ts">
    import { onMount, onDestroy } from 'svelte';
    import { getStructureUrl } from '../api';
    import { getElementData, getElementColor, getElementDescription } from './elementData';
    import type { AtomInfo, ElementProperties } from '../types';
    
    export let cifUrl: string | null = null;
    export let formula: string = '';
    export let materialId: string = '';
    
    let viewerElement: HTMLDivElement;
    let tooltipElement: HTMLDivElement;
    let infoPanel: HTMLDivElement;
    
    let viewer: any = null;
    let loading: boolean = true;
    let error: string | null = null;
    
    // State variables for viewer controls
    let showUnitCell: boolean = true;
    let showAtomLabels: boolean = false;
    let backgroundColor: string = '#ffffff';
    let style: string = 'ball and stick';
    let useElementColors: boolean = true;
    
    // Current atom information
    let currentAtom: AtomInfo | null = null;
    
    // Store all atom information for structure
    let atomsInfo: AtomInfo[] = [];
    
    // Mouse position for tooltip
    let mouseX: number = 0;
    let mouseY: number = 0;
    let showTooltip: boolean = false;
    
    // Atoms statistics for current structure
    let atomStats: { [symbol: string]: number } = {};
    
    // Import 3Dmol.js dynamically
    async function load3DMol(): Promise<any> {
      try {
        // Load 3Dmol.js from CDN
        const script = document.createElement('script');
        script.src = 'https://3dmol.org/build/3Dmol-min.js';
        script.async = true;
        
        const loaded = new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = reject;
        });
        
        document.head.appendChild(script);
        await loaded;
        
        return window.$3Dmol;
      } catch (err) {
        console.error('Failed to load 3Dmol.js:', err);
        throw err;
      }
    }
    
    // Initialize the 3D viewer
    async function initViewer(): Promise<void> {
      try {
        loading = true;
        error = null;
        
        if (!viewerElement) return;
        
        // Check if $3Dmol is already loaded
        const $3Dmol = (window as any).$3Dmol || await load3DMol();
        
        // Create the viewer
        viewer = $3Dmol.createViewer(viewerElement, {
          backgroundColor: backgroundColor
        });
        
        if (cifUrl) {
          await loadStructure();
        } else {
          error = "No structure URL provided";
          loading = false;
        }
      } catch (err: any) {
        error = `Failed to initialize viewer: ${err.message}`;
        loading = false;
      }
    }
    
    // Load the structure from the CIF URL
    async function loadStructure(): Promise<void> {
      if (!viewer || !cifUrl) return;
      
      try {
        loading = true;
        error = null;
        
        // Get the full URL
        const fullUrl = getStructureUrl(cifUrl);
        
        // Fetch the CIF data
        const response = await fetch(fullUrl || '');
        
        if (!response.ok) {
          throw new Error(`Failed to fetch structure (${response.status})`);
        }
        
        const cifData = await response.text();
        
        // Clear the viewer and atom info
        viewer.clear();
        atomsInfo = [];
        atomStats = {};
        
        // Load the structure
        viewer.addModel(cifData, "cif");
        
        // Extract atom information
        extractAtomInfo();
        
        // Style the structure
        updateStyle();
        
        // Setup hover and click listeners
        setupInteractivity();
        
        // Zoom to fit
        viewer.zoomTo();
        
        // Set initial view
        viewer.setView([ 
          -13.516, -1.289, 15.831,  // lookAt x,y,z
           0.0, 0.0, 0.0,           // center x,y,z
           0.132, -0.271, 0.954     // up x,y,z
        ]);
        
        // Render
        viewer.render();
        
        loading = false;
      } catch (err: any) {
        error = `Failed to load structure: ${err.message}`;
        loading = false;
      }
    }
    
    // Extract atom information from the model
    function extractAtomInfo(): void {
      if (!viewer) return;
      
      const atoms = viewer.getModel().selectedAtoms({});
      atomsInfo = [];
      atomStats = {};
      
      for (let i = 0; i < atoms.length; i++) {
        const atom = atoms[i];
        const element = atom.elem;
        
        // Count atoms by element
        atomStats[element] = (atomStats[element] || 0) + 1;
        
        // Get element properties
        const elementProperties = getElementData(element);
        
        // Create atom info object
        const atomInfo: AtomInfo = {
          element: element,
          atomicNumber: elementProperties.atomicNumber,
          position: [atom.x, atom.y, atom.z],
          elementProperties: elementProperties
        };
        
        atomsInfo.push(atomInfo);
      }
      
      // Sort the atom stats by element symbol
      const tempStats: { [symbol: string]: number } = {};
      Object.keys(atomStats).sort().forEach(key => {
        tempStats[key] = atomStats[key];
      });
      atomStats = tempStats;
    }
    
    // Setup interactivity for atoms
    function setupInteractivity(): void {
      if (!viewer) return;
      
      // Add hover callback
      viewer.setHoverDuration(200);
      
      viewer.setHover({
        hoverCallback: (atom: any, viewer: any, event: any, container: any) => {
          if (!atom) {
            hideTooltip();
            return;
          }
          
          // Update mouse position
          if (event) {
            mouseX = event.pageX;
            mouseY = event.pageY;
          }
          
          // Get element information
          const element = atom.elem;
          const elementProperties = getElementData(element);
          
          // Create current atom info
          currentAtom = {
            element: element,
            atomicNumber: elementProperties.atomicNumber,
            position: [atom.x, atom.y, atom.z],
            elementProperties: elementProperties
          };
          
          // Show tooltip
          showTooltip = true;
          
          // Highlight the atom
          viewer.setStyle({serial: atom.serial}, {sphere: {scale: 0.7, color: elementProperties.color}});
          viewer.render();
        },
        unhoverCallback: () => {
          hideTooltip();
          // Restore the original style
          updateStyle();
        }
      });
      
      // Add click callback for showing details in the info panel
      viewer.addClickListener((atom: any, viewer: any, event: any, container: any) => {
        if (!atom) return;
        
        // Get element information
        const element = atom.elem;
        const elementProperties = getElementData(element);
        
        // Create current atom info
        currentAtom = {
          element: element,
          atomicNumber: elementProperties.atomicNumber,
          position: [atom.x, atom.y, atom.z],
          elementProperties: elementProperties
        };
        
        // Highlight the atom
        viewer.setStyle({}, updateStyle()); // Reset all atoms
        viewer.setStyle({serial: atom.serial}, {sphere: {scale: 0.8, color: '#FFC107'}}); // Highlight selected atom
        viewer.render();
      });
    }
    
    // Hide tooltip
    function hideTooltip(): void {
      showTooltip = false;
      currentAtom = null;
    }
    
    // Update the display style
    function updateStyle(): any {
      if (!viewer) return {};
      
      // Base style object
      let styleObj = {};
      
      // Apply selected style
      switch (style) {
        case 'ball and stick':
          styleObj = {stick: {radius: 0.15}, sphere: {scale: 0.4}};
          break;
        case 'stick':
          styleObj = {stick: {radius: 0.2}};
          break;
        case 'sphere':
          styleObj = {sphere: {scale: 0.6}};
          break;
        case 'line':
          styleObj = {line: {}};
          break;
        case 'cartoon':
          styleObj = {cartoon: {}};
          break;
      }
      
      // Clear existing styles
      viewer.setStyle({}, styleObj);
      
      // Apply element colors if enabled
      if (useElementColors) {
        for (const atom of atomsInfo) {
          const element = atom.element;
          const color = getElementColor(element);
          
          // Apply color based on style
          if (style === 'ball and stick') {
            viewer.setStyle({elem: element}, {sphere: {color: color}, stick: {color: color}});
          } else if (style === 'sphere') {
            viewer.setStyle({elem: element}, {sphere: {color: color}});
          } else if (style === 'stick') {
            viewer.setStyle({elem: element}, {stick: {color: color}});
          } else if (style === 'line') {
            viewer.setStyle({elem: element}, {line: {color: color}});
          }
        }
      }
      
      // Show/hide unit cell
      if (showUnitCell) {
        viewer.addUnitCell();
      }
      
      // Show/hide atom labels
      if (showAtomLabels) {
        viewer.addLabels({}, {font: '12px Arial', alignment: 'center'});
      }
      
      // Update background color
      viewer.setBackgroundColor(backgroundColor);
      
      // Render the updated view
      viewer.render();
      
      return styleObj;
    }
    
    // Handle style change
    function handleStyleChange(): void {
      updateStyle();
    }
    
    // Reset view
    function resetView(): void {
      if (viewer) {
        viewer.zoomTo();
        viewer.render();
      }
    }
    
    // Download structure
    function downloadStructure(): void {
      if (cifUrl) {
        const fullUrl = getStructureUrl(cifUrl);
        if (fullUrl) {
          window.open(fullUrl, '_blank');
        }
      }
    }
    
    // Get a formatted description of the structure
    function getStructureDescription(): string {
      // Count total atoms
      const totalAtoms = Object.values(atomStats).reduce((a, b) => a + b, 0);
      
      // Format description
      let description = `${formula}\n`;
      if (materialId) {
        description += `ID: ${materialId}\n`;
      }
      description += `Total atoms: ${totalAtoms}\n\n`;
      
      // Add element counts
      description += 'Composition:\n';
      Object.entries(atomStats).forEach(([element, count]) => {
        const percentage = (count / totalAtoms * 100).toFixed(1);
        description += `${element}: ${count} (${percentage}%)\n`;
      });
      
      return description;
    }
    
    // Initialize on mount
    onMount(() => {
      initViewer();
    });
    
    // Cleanup on destroy
    onDestroy(() => {
      if (viewer) {
        viewer.clear();
      }
    });
    
    // Watch for URL changes
    $: if (viewer && cifUrl) {
      loadStructure();
    }
  </script>
  
  <div class="structure-viewer">
    <div class="viewer-header">
      <h3>
        {formula || 'Structure Viewer'}
        {#if materialId}
          <span class="material-id">{materialId}</span>
        {/if}
      </h3>
      
      <div class="viewer-controls">
        <div class="control-group">
          <label for="style">Style:</label>
          <select id="style" bind:value={style} on:change={handleStyleChange} disabled={loading}>
            <option value="ball and stick">Ball and Stick</option>
            <option value="stick">Stick</option>
            <option value="sphere">Sphere</option>
            <option value="line">Line</option>
          </select>
        </div>
        
        <div class="control-group">
          <label>
            <input type="checkbox" bind:checked={useElementColors} on:change={handleStyleChange} disabled={loading}>
            Element Colors
          </label>
        </div>
        
        <div class="control-group">
          <label>
            <input type="checkbox" bind:checked={showUnitCell} on:change={handleStyleChange} disabled={loading}>
            Unit Cell
          </label>
        </div>
        
        <div class="control-group">
          <label>
            <input type="checkbox" bind:checked={showAtomLabels} on:change={handleStyleChange} disabled={loading}>
            Atom Labels
          </label>
        </div>
        
        <button class="control-button reset" on:click={resetView} disabled={loading || error !== null}>
          Reset View
        </button>
        
        <button class="control-button download" on:click={downloadStructure} disabled={loading || error !== null || !cifUrl}>
          Download CIF
        </button>
      </div>
    </div>
    
    <div class="viewer-container">
      {#if loading}
        <div class="loading-overlay">
          <div class="spinner"></div>
          <div>Loading structure...</div>
        </div>
      {/if}
      
      {#if error}
        <div class="error-overlay">
          <div class="error-icon">!</div>
          <div>{error}</div>
        </div>
      {/if}
      
      <div class="structure-layout">
        <div class="viewer-element" bind:this={viewerElement}></div>
        
        <div class="info-panel" bind:this={infoPanel}>
          <h4>Structure Information</h4>
          
          {#if Object.keys(atomStats).length > 0}
            <div class="structure-info">
              <pre>{getStructureDescription()}</pre>
            </div>
          {/if}
          
          {#if currentAtom}
            <div class="element-info">
              <h5>Selected Element: {currentAtom.element}</h5>
              <div class="element-color" style="background-color: {currentAtom.elementProperties.color};"></div>
              <div class="element-properties">
                <p><strong>Name:</strong> {currentAtom.elementProperties.name}</p>
                <p><strong>Atomic Number:</strong> {currentAtom.elementProperties.atomicNumber}</p>
                <p><strong>Atomic Mass:</strong> {currentAtom.elementProperties.atomicMass} u</p>
                <p><strong>Category:</strong> {currentAtom.elementProperties.category}</p>
                <p><strong>Electron Config:</strong> {currentAtom.elementProperties.electronConfiguration}</p>
                {#if currentAtom.elementProperties.electronegativity}
                  <p><strong>Electronegativity:</strong> {currentAtom.elementProperties.electronegativity}</p>
                {/if}
                {#if currentAtom.elementProperties.ionizationEnergy}
                  <p><strong>Ionization Energy:</strong> {currentAtom.elementProperties.ionizationEnergy} eV</p>
                {/if}
              </div>
            </div>
          {:else}
            <div class="element-placeholder">
              <p>Hover or click on an atom to see element details</p>
            </div>
          {/if}
        </div>
      </div>
      
      {#if showTooltip && currentAtom}
        <div 
          class="atom-tooltip" 
          bind:this={tooltipElement}
          style="left: {mouseX + 15}px; top: {mouseY + 15}px;"
        >
          <div class="tooltip-title">
            <span class="element-symbol">{currentAtom.element}</span>
            <span class="element-name">{currentAtom.elementProperties.name}</span>
          </div>
          <div class="tooltip-content">
            <p>Z: {currentAtom.elementProperties.atomicNumber}</p>
            <p>Mass: {currentAtom.elementProperties.atomicMass} u</p>
            <p>Category: {currentAtom.elementProperties.category}</p>
          </div>
        </div>
      {/if}
    </div>
  </div>
  
  <style>
    .structure-viewer {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      overflow: hidden;
      margin-bottom: 2rem;
    }
    
    .viewer-header {
      padding: 1rem;
      border-bottom: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    h3 {
      margin: 0;
      font-size: 1.25rem;
      color: #2d3748;
    }
    
    h4 {
      margin: 0 0 1rem 0;
      font-size: 1.1rem;
      color: #2d3748;
      border-bottom: 1px solid #e2e8f0;
      padding-bottom: 0.5rem;
    }
    
    h5 {
      margin: 0.5rem 0;
      font-size: 1rem;
      color: #2d3748;
    }
    
    .material-id {
      font-size: 0.85rem;
      color: #718096;
      font-weight: normal;
      margin-left: 0.5rem;
    }
    
    .viewer-controls {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      gap: 0.75rem;
    }
    
    .control-group {
      display: flex;
      align-items: center;
      gap: 0.35rem;
    }
    
    .control-group label {
      font-size: 0.85rem;
      color: #4a5568;
      display: flex;
      align-items: center;
      gap: 0.35rem;
    }
    
    .control-group select {
      font-size: 0.85rem;
      padding: 0.25rem;
      border: 1px solid #e2e8f0;
      border-radius: 4px;
    }
    
    .control-button {
      background-color: #edf2f7;
      border: 1px solid #e2e8f0;
      border-radius: 4px;
      padding: 0.25rem 0.5rem;
      font-size: 0.85rem;
      color: #4a5568;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .control-button:hover {
      background-color: #e2e8f0;
    }
    
    .control-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .control-button.download {
      background-color: #4299e1;
      color: white;
      border-color: #3182ce;
    }
    
    .control-button.download:hover {
      background-color: #3182ce;
    }
    
    .viewer-container {
      position: relative;
      height: 500px;
    }
    
    .structure-layout {
      display: grid;
      grid-template-columns: 3fr 1fr;
      height: 100%;
    }
    
    .viewer-element {
      position: relative;
      width: 100%;
      height: 100%;
    }
    
    .info-panel {
      padding: 1rem;
      border-left: 1px solid #e2e8f0;
      overflow-y: auto;
      background-color: #f8fafc;
      height: 100%;
      box-sizing: border-box;
    }
    
    .structure-info {
      font-size: 0.85rem;
      margin-bottom: 1rem;
    }
    
    .structure-info pre {
      margin: 0;
      font-family: monospace;
      white-space: pre-wrap;
    }
    
    .element-info {
      border-top: 1px solid #e2e8f0;
      padding-top: 1rem;
    }
    
    .element-color {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      margin-right: 0.5rem;
      display: inline-block;
      border: 1px solid #e2e8f0;
    }
    
    .element-properties {
      font-size: 0.85rem;
    }
    
    .element-properties p {
      margin: 0.25rem 0;
    }
    
    .element-placeholder {
      color: #a0aec0;
      font-size: 0.9rem;
      text-align: center;
      padding: 2rem 0;
      border-top: 1px solid #e2e8f0;
      margin-top: 1rem;
    }
    
    .loading-overlay, .error-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 10;
    }
    
    .spinner {
      border: 3px solid rgba(66, 153, 225, 0.3);
      border-radius: 50%;
      border-top: 3px solid #4299e1;
      width: 2rem;
      height: 2rem;
      animation: spin 1s linear infinite;
      margin-bottom: 0.5rem;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .error-icon {
      background-color: #fc8181;
      color: white;
      width: 2rem;
      height: 2rem;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }
    
    .error-overlay {
      background-color: rgba(255, 255, 255, 0.9);
      color: #e53e3e;
    }
    
    .atom-tooltip {
      position: fixed;
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      border-radius: 4px;
      padding: 0.5rem;
      font-size: 0.85rem;
      z-index: 100;
      pointer-events: none;
      max-width: 200px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
    
    .tooltip-title {
      display: flex;
      align-items: center;
      margin-bottom: 0.5rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
      padding-bottom: 0.25rem;
    }
    
    .element-symbol {
      font-weight: bold;
      font-size: 1.2em;
      margin-right: 0.5rem;
    }
    
    .tooltip-content p {
      margin: 0.25rem 0;
      font-size: 0.8rem;
    }
    
    /* Responsive styles */
    @media (max-width: 768px) {
      .structure-layout {
        grid-template-columns: 1fr;
      }
      
      .info-panel {
        height: auto;
        border-left: none;
        border-top: 1px solid #e2e8f0;
      }
      
      .viewer-container {
        height: auto;
      }
      
      .viewer-element {
        height: 300px;
      }
    }
  </style>

================
File: src/routes/+layout.svelte
================
<script lang="ts">
	import '../app.css';
	let { children } = $props();
</script>

{@render children()}

================
File: src/routes/+page.svelte
================
<h1>Welcome to SvelteKit</h1>
<p>Visit <a href="https://svelte.dev/docs/kit">svelte.dev/docs/kit</a> to read the documentation</p>

================
File: src/api.ts
================
/**
 * API client for the Material Generator API.
 */
import type { GenerationResponse } from './types';

// Base URL for API requests (configurable)
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

/**
 * Generate materials from a natural language query.
 * 
 * @param params - Query parameters
 * @returns Promise with the API response
 */
export async function generateMaterials({ 
  query, 
  n_samples = 5, 
  temperature = 1.2 
}: { 
  query: string; 
  n_samples?: number; 
  temperature?: number 
}): Promise<GenerationResponse> {
  try {
    const response = await fetch(`${API_BASE_URL}/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query,
        n_samples,
        temperature,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to generate materials');
    }

    return await response.json() as GenerationResponse;
  } catch (error) {
    console.error('Error generating materials:', error);
    throw error;
  }
}

/**
 * Get the full URL for a structure file.
 * 
 * @param path - Structure file path
 * @returns Full URL
 */
export function getStructureUrl(path: string | null): string | null {
  if (!path) return null;
  
  // If path is already a full URL, return it
  if (path.startsWith('http')) {
    return path;
  }
  
  // If path starts with /api, it's relative to the API base URL
  if (path.startsWith('/api/')) {
    return API_BASE_URL + path.substring(4);
  }
  
  // Otherwise, it's relative to the API base URL
  return `${API_BASE_URL}${path}`;
}

/**
 * Health check for the API.
 * 
 * @returns Promise with the API response
 */
export async function checkApiHealth(): Promise<{ status: string; message: string }> {
  try {
    const response = await fetch(`${API_BASE_URL}/health`);
    
    if (!response.ok) {
      throw new Error('API health check failed');
    }
    
    return await response.json();
  } catch (error) {
    console.error('API health check failed:', error);
    throw error;
  }
}

================
File: src/app.css
================
@import 'tailwindcss';
@plugin '@tailwindcss/typography';
@plugin '@tailwindcss/forms'

================
File: src/app.d.ts
================
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

================
File: src/app.html
================
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

================
File: src/App.svelte
================
<script lang="ts">
    import { onMount } from 'svelte';
    import { checkApiHealth } from './api';
    import MaterialForm from './lib/MaterialForm.svelte';
    import MaterialCard from './lib/MaterialCard.svelte';
    import StructureViewer from './lib/StructureViewer.svelte';
    import type { Material, GenerationResponse } from './types';
    
    // App state
    let apiStatus: 'checking' | 'connected' | 'disconnected' = 'checking';
    let generatedMaterials: Material[] = [];
    let selectedMaterial: Material | null = null;
    let processTime: number | null = null;
    
    // Check API health on mount
    onMount(async () => {
      try {
        await checkApiHealth();
        apiStatus = 'connected';
      } catch (error) {
        apiStatus = 'disconnected';
        console.error('API connection failed:', error);
      }
    });
    
    // Handle successful generation
    function handleGenerationSuccess(event: CustomEvent<GenerationResponse>): void {
      const result = event.detail;
      generatedMaterials = result.materials || [];
      processTime = result.process_time || null;
      
      // Select the first material if available
      if (generatedMaterials.length > 0) {
        selectedMaterial = generatedMaterials[0];
      } else {
        selectedMaterial = null;
      }
    }
    
    // Handle generation error
    function handleGenerationError(): void {
      generatedMaterials = [];
      selectedMaterial = null;
      processTime = null;
    }
    
    // Select a material for viewing
    function selectMaterial(material: Material): void {
      selectedMaterial = material;
    }
  </script>

================
File: src/types.ts
================
// Material types
export interface MaterialProperty {
    min: number;
    max: number;
  }
  
  export interface Constraints {
    band_gap: MaterialProperty;
    formation_energy: MaterialProperty;
    bulk_modulus: MaterialProperty;
    [key: string]: MaterialProperty;
  }
  
  export interface Material {
    formula: string;
    material_id: string;
    band_gap: number;
    formation_energy: number;
    bulk_modulus: number;
    cif_url: string | null;
  }
  
  export interface GenerationResponse {
    success: boolean;
    query: string;
    constraints: Constraints;
    materials: Material[];
    process_time: number;
    error?: string;
  }
  
  // Structure visualization types
  export interface AtomInfo {
    element: string;
    atomicNumber: number;
    position: [number, number, number];
    elementProperties: ElementProperties;
  }
  
  export interface ElementProperties {
    name: string;
    symbol: string;
    atomicNumber: number;
    atomicMass: number;
    category: string;
    color: string;
    electronConfiguration: string;
    electronegativity?: number;
    ionizationEnergy?: number;
  }
  
  export interface LatticeParameters {
    a: number;
    b: number;
    c: number;
    alpha: number;
    beta: number;
    gamma: number;
  }
  
  export interface StructureData {
    formula: string;
    atoms: string[];
    positions: number[][];
    lattice_parameters: LatticeParameters;
    lattice_vectors: number[][];
  }
  
  // Element data type (for periodic table information)
  export interface ElementData {
    [symbol: string]: ElementProperties;
  }

================
File: .gitignore
================
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

================
File: .npmrc
================
engine-strict=true

================
File: .prettierignore
================
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

================
File: .prettierrc
================
{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": [
		"prettier-plugin-svelte",
		"prettier-plugin-tailwindcss"
	],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}

================
File: eslint.config.js
================
import prettier from "eslint-config-prettier";
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
import svelteConfig from './svelte.config.js';
const gitignorePath = fileURLToPath(new URL("./.gitignore", import.meta.url));

export default ts.config(
  includeIgnoreFile(gitignorePath),
  js.configs.recommended,
  ...ts.configs.recommended,
  ...svelte.configs.recommended,
  prettier,
  ...svelte.configs['flat/prettier'],
  {
    languageOptions: {
	  globals: {
	    ...globals.browser,
	    ...globals.node
	  }
	}
  },
  {
    files: ["**/*.svelte", "**/*.svelte.ts", "**/*.svelte.js"],
    ignores: ["eslint.config.js", "svelte.config.js"],

    languageOptions: {
	  parserOptions: {
	    projectService: true,
	    extraFileExtensions: ['.svelte'],
	    parser: ts.parser,
	    svelteConfig
	  }
	}
  }
);

================
File: svelte.config.js
================
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		adapter: adapter()
	}
};

export default config;

================
File: tsconfig.json
================
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"target": "ESNext",
		"useDefineForClassFields": true,
		"module": "ESNext",
		"allowJs": true,
		"checkJs": true,
		"isolatedModules": true,
		"strict": true,
		"noImplicitAny": true,
		"strictNullChecks": true,
		"noEmit": true,
		"outDir": "dist",
		"baseUrl": ".",
		"paths": {
		  "@/*": ["src/*"]
		}
	  },
	  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.svelte"],
	  "references": [{ "path": "./tsconfig.node.json" }]
}

================
File: tsconfig.node.json
================
{
    "compilerOptions": {
      "composite": true,
      "skipLibCheck": true,
      "module": "ESNext",
      "moduleResolution": "bundler",
      "allowSyntheticDefaultImports": true
    },
    "include": ["vite.config.ts"]
  }

================
File: vite.config.ts
================
import tailwindcss from "@tailwindcss/vite";
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit(), tailwindcss()]
});
